my_x[i] = pb_of_x(val)
i = i+1
}
my_x
seed = 1
my_v = runif(10)
i = 1
my_x = rep(0, 10)
for (val in my_v){
my_x[i] = pb_of_x(val)
i = i+1
}
my_x
help(unif)
help(runif)
seed = 1
my_v = runif(0, 1, 10)
i = 1
my_x = rep(0, 10)
for (val in my_v){
my_x[i] = pb_of_x(val)
i = i+1
}
my_x
my_v = runif(10)
i = 1
my_x = rep(0, 10)
for (val in my_v){
my_x[i] = pb_of_x(val)
i = i+1
}
my_x
my_v = runif(10)
my_v
pb_of_x <- function(val){
# x_val = rep(1, length(my_v))
if (val<0.2) {
x=1
} else if (val<0.35){
x = 2
} else if (val < 0.6){
x = 3
} else {
x = 4
}
return(x)
}
seed = 1
my_v = runif(10)
i = 1
my_x = rep(0, 10)
for (val in my_v){
my_x[i] = pb_of_x(val)
i = i+1
}
my_x
my_v
get_val_of_u <- function(val){
# x_val = rep(1, length(my_v))
if (val<0.2) {
x=1
} else if (val<0.35){
x = 2
} else if (val < 0.6){
x = 3
} else {
x = 4
}
return(x)
}
my_v = runif(10, seed=1)
produce_x_of_v <- function(my_v){
i = 1
my_x = rep(0, length(my_v))
for (val in my_v){
my_x[i] = pb_of_x(val)
i = i+1
}
return(my_x)
}
my_v = runif(10, seed=1)
my_v = runif(10, seed=1)
produce_x_of_v(my_v)
library(swirl)
ls()
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- (1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
bye()
swirl()
bye()
# 想要自己创建拉格朗日插值函数，进行插值
data(apply(data, 1, anyNA)==F)
sum(complete.cases(data))
help("complete.cases")
data
# 导入包
library(mice)
library(VIM)
library(dplyr)
library(xlsx)
# 读取数据
data<-read.xlsx("D:/lagua/CODING/R-learn/R-code/Chap5_model/missing_data.xls", 1,
header=0,
colClasses=rep("numeric",4))
# 查看数据
data
summary(data)
md.pattern(data)
aggr(data,prop=T,numbers=T,col=c('white','grey'))
# 准备使用mice进行插值
m <- 5
mi_data <- mice(data,m, seed=1)
mi_data$imp
mi_data$imp$X1
help(mice)
# 想要自己创建拉格朗日插值函数，进行插值
data(apply(data, 1, anyNA)==F)
data
sum(complete.cases(data))
data(complete.cases(data))
complete.cases(data)
apply(data, 1, complete.cases)
data(apply(data, 1, complete.cases))
data[apply(data, 1, complete.cases)]
data[apply(data, 1, complete.cases),]
complete.cases(data)
data[complete.cases(data)==T,]
plot(no_na)
no_na = data[complete.cases(data)==T,]
plot(no_na)
plot(data)
View(mi_data)
is_na = data[complete.cases(data)==F,]
# 这里x是n+1维的
a = 1
# n = length(x)-1
for(x.i in 1:length(x)){
if (x.i==x[k]) next
a = a*(x.var-x.i)/(x[k]-x.i)
}
# 计算插值基函数
my.lk.f = function(k, x, x.var){
# 这里x是n+1维的
a = 1
# n = length(x)-1
for(x.i in 1:length(x)){
if (x.i==x[k]) next
a = a*(x.var-x.i)/(x[k]-x.i)
}
return(a)
}
# 利用插值基函数构造拉格朗日插值多项式
my_lagr = function(x,y,x.var, k=5){
ln = 0
if (length(x) != length(y)){
stop('x and y must be the same dimension!')
}
for (y.i in y){
ln = ln + my.lk.f(k, x, x.var)*y.i
}
return(ln)
}
is_na
my_lagr(no_na$X2, n_na$x3, 235.9063)
my_lagr(no_na$X2, no_na$x3, 235.9063)
print(length(x), length(y))
# 利用插值基函数构造拉格朗日插值多项式
my_lagr = function(x,y,x.var, k=5){
ln = 0
if (length(x) != length(y)){
print(length(x), length(y))
stop('x and y must be the same dimension!')
}
for (y.i in y){
ln = ln + my.lk.f(k, x, x.var)*y.i
}
return(ln)
}
my_lagr(no_na$X2, no_na$x3, 235.9063)
# 利用插值基函数构造拉格朗日插值多项式
my_lagr = function(x,y,x.var, k=5){
ln = 0
if (length(x) != length(y)){
print(length(x))
print(length(y))
stop('x and y must be the same dimension!')
}
for (y.i in y){
ln = ln + my.lk.f(k, x, x.var)*y.i
}
return(ln)
}
my_lagr(no_na$X2, no_na$x3, 235.9063)
no_na$X2
my_lagr(no_na$X2, no_na$X3, 235.9063)
# 利用插值基函数构造拉格朗日插值多项式
my_lagr = function(x,y,x.var, k=5){
ln = 0
if (length(x) != length(y)){
print(length(x))
print(length(y))
stop('x and y must be the same dimension!')
}
for (y.i in y){
ln = ln + my.lk.f(k, x, x.var)*y.i
}
return(ln)
}
my_lagr(no_na$X2, no_na$X3, 235.9063)
a = my_lagr(no_na$X2, no_na$X3, 235.9063)
a
# 计算插值基函数
my.lk.f = function(k, x, x.var){
# 这里x是n+1维的
a = 1
# n = length(x)-1
for(x.i in 1:length(x)){
if (x.i==x[k]) next
a = a*(x.var-x.i)/(x[k]-x.i)
}
return(a)
}
# 利用插值基函数构造拉格朗日插值多项式
my_lagr = function(x,y,x.var, k=12){
ln = 0
if (length(x) != length(y)){
print(length(x))
print(length(y))
stop('x and y must be the same dimension!')
}
for (y.i in y){
ln = ln + my.lk.f(k, x, x.var)*y.i
}
return(ln)
}
a = my_lagr(no_na$X2, no_na$X3, 235.9063)
a
with(mi_Air,lm(Ozone~1)) %>% pool() %>% summary()
with(mi_data,lm(Ozone~1)) %>% pool() %>% summary()
with(mi_data,lm(x1~1)) %>% pool() %>% summary()
with(mi_data,lm(X1~1)) %>% pool() %>% summary()
##读入数据，生成R数据框
Air <- read.csv("D:/lagua/CODING/R-learn/Junni-Zhang/data/ch3_air.csv",
colClasses=rep("numeric",4))
##查看Air数据集各变量的基本情况
summary(Air)
##查看数据缺失模式
md.pattern(Air)
##将Air数据集的缺失情况可视化
aggr(Air,prop=T,numbers=T,col=c('white','grey'))
##对Air数据集进行多重插补。
m <- 5
mi_Air <- mice(Air,m)
##对插补后的数据集work.mi_Air进行综合分析，
##估计Ozone和SolarR这两个变量的总体均值，并得到估计的标准误差。
with(mi_Air,lm(Ozone~1)) %>% pool() %>% summary()
with(mi_Air,lm(SolarR~1)) %>% pool() %>% summary()
plot(Air$Temp, Air$Ozone)
lm.Temp.Ozone <- lm(Air$Ozone~Air$Temp)
summary(lm.Temp.Ozone)
lm.Temp.Ozone <- lm(Air$Ozone~I(Air$Temp^2)+Air$Temp)
summary(lm.Temp.Ozone)
##加载程序包
library(mice)
#mice是实现多重插补的程序包，我们将调用其中的mice和md.pattern函数。
library(VIM)
#VIM是展示数据缺失模式可视化的程序包，我们将调用其中的aggr函数。
library(dplyr)
##读入数据，生成R数据框
Air <- read.csv("D:/lagua/CODING/R-learn/Junni-Zhang/data/ch3_air.csv",
colClasses=rep("numeric",4))
View(Air)
##查看Air数据集各变量的基本情况
summary(Air)
##查看数据缺失模式
md.pattern(Air)
##将Air数据集的缺失情况可视化
aggr(Air,prop=T,numbers=T,col=c('white','grey'))
mi_Air <- mice(Air,m)
mi_Air$iter
mi_Air$imp#mice函数实现多重插补，插补后的数据存入mi_Air。
mi_Air$variable
mi_Air <- mice(Air,m)
mi_Air$imp
##对插补后的数据集work.mi_Air进行综合分析，
##估计Ozone和SolarR这两个变量的总体均值，并得到估计的标准误差。
with(mi_Air,lm(Ozone~1)) %>% pool() %>% summary()
with(mi_Air,lm(SolarR~1)) %>% pool() %>% summary()
# 导入包
library(mice)
library(VIM)
library(dplyr)
library(xlsx)
# 读取数据
data<-read.xlsx("D:/lagua/CODING/R-learn/R-code/Chap5_model/missing_data.xls", 1,
header=0,
colClasses=rep("numeric",4))
# 查看数据
data
summary(data)
md.pattern(data)
aggr(data,prop=T,numbers=T,col=c('white','grey'))
# 准备使用mice进行插值
m <- 5
mi_data <- mice(data,m, seed=1)
mi_data$imp
mi_data$imp$X1
help(mice)
fit = with(mi_data, lm(X1~X2+X3))
pooled = pool(fit)
fit
summary(fit)
fit = with(mi_data, lm(X2~X1+X3))
fit
summary(fit)
pooled = pool(fit)
pool.r.squared(fit)
fit = with(mi_data, lm(X2~X1+X3))
fit
summary(fit)
fit = with(mi_data, lm(X1~X3))
fit
summary(fit)
View(mi_data$imp)
View(mi_data$imp$X1)
View(mi_data$imp$X2)
# 读取数据
data<-read.xlsx("D:/lagua/CODING/R-learn/R-code/Chap5_model/missing_data.xls", 1,
header=0,
colClasses=rep("numeric",4))
# 查看数据
data
View(data)
summary(data)
md.pattern(data)
help(mice)
fit = with(mi_data, lm(X1~X2+X3))
fit
summary(fit)
fit = with(mi_data, lm(X2~X1+X3))
fit
summary(fit)
fit = with(mi_data, lm(X1~X3))
fit
summary(fit)
fit = with(mi_data, lm(X3~X1+X2))
fit
summary(fit)
# 使用第一种模型来拟合
fit = with(mi_data, lm(X1~X3))
# 使用第一种模型来拟合
fit = with(mi_data, lm(X3~X1))
fit
summary(fit)
# 使用第一种
fit = with(mi_data, lm(X1~X2+X3))
fit
# 使用第一种
fit = with(mi_data, lm(X1~X2+X3))
# fit
summary(fit)
pooled = pool(fit)
pool.r.squared(fit)
pooled
pool.r.squared(fit)
# 使用第一种
fit = with(mi_data, lm(X1~X2+X3))
# fit
summary(fit)
pooled = pool(fit)
pooled
pool.r.squared(fit)
# 使用第二种
fit = with(mi_data, lm(X2~X1+X3))
summary(fit)
pooled = pool(fit)
pooled
pool.r.squared(fit)
# 使用第三种
fit = with(mi_data, lm(X3~X1+X2))
summary(fit)
pooled = pool(fit)
pooled
pool.r.squared(fit)
# 使用第一种模型来拟合
fit = with(mi_data, lm(X3~X1))
summary(fit)
pooled = pool(fit)
pooled
pool.r.squared(fit)
# 使用第er种模型来拟合
fit = with(mi_data, lm(X3~X1))
summary(fit)
pooled = pool(fit)
pooled
pool.r.squared(fit)
# 使用第一种模型来拟合
fit = with(mi_data, lm(X1~X3))
summary(fit)
pooled = pool(fit)
pooled
pool.r.squared(fit)
# 使用第er种模型来拟合
fit = with(mi_data, lm(X3~X1))
summary(fit)
pooled = pool(fit)
pooled
pool.r.squared(fit)
# 导入包
library(mice)
library(VIM)
library(dplyr)
library(xlsx)
# 读取数据
data<-read.xlsx("D:/lagua/CODING/R-learn/R-code/Chap5_model/missing_data.xls", 1,
header=0,
colClasses=rep("numeric",4))
# 查看数据
data
summary(data)
md.pattern(data)
aggr(data,prop=T,numbers=T,col=c('white','grey'))
# 准备使用mice进行插值
m <- 5
mi_data <- mice(data,m, seed=1)
mi_data$imp
mi_data$imp$X1
help(mice)
# 使用第一种模型来拟合
fit = with(mi_data, lm(X1~X3))
summary(fit)
pooled = pool(fit)
pooled
pool.r.squared(fit)
fit
complete.data = complete(mi_data, 1)
complete.data
write.table(complete.data, file=r'D:\lagua\CODING\R-learn\for student\chapter5\电力窃漏电用户自动识别\上机实验\data\complete_data.xlsx')
write.table(complete.data, file='D:\lagua\CODING\R-learn\for student\chapter5\电力窃漏电用户自动识别\上机实验\data\complete_data.xlsx')
##加载程序包
library(dplyr)
library(ggplot2)
# ---------读入数据---------
setwd("D:/lagua/CODING/R-learn/R-code/Chap5_DimensionReduction")
street <- read.csv("LANeighborhoods.csv", header=T, skip=1)
colnames(street)
# 去除掉第一列，因为后面需要计算相关系数矩阵
street = street[, -1]
summary(street)
# ---------主成分分析---------
help("princomp")
streetout <- princomp(street,cor = T,scores = T)
summary(streetout,loadings=T)
streetout <- princomp(scale(street),cor = T,scores = T)
#streetout$scores记录了每个观测的主成分得分。
streetout$scores
##显示分析结果
summary(streetout,loadings=T)
##画崖底碎石图
screeplot(streetout,type = "lines")
##画前两个主成分的双标图
biplot(streetout,choices = 1:2,col="black")
# ---------多维标度分析---------
tmpstreet <- t(scale(street))
help(dist)
# 求出距离矩阵， 使用L_1范数--曼哈顿距离
diststreet <- dist(tmpstreet,method = "manhattan")
# ---------度量形式
# help("cmdscale")
out <- cmdscale(diststreet) %>% as.data.frame()
ggplot(out,aes(x=V1,y=V2))+
geom_point()+
geom_text(aes(y=V2+5,label=row.names(out)))
# ---------非度量形式
library(MASS)
D = as.matrix(diststreet) # 转化为矩阵形式
help("isoMDS")
MDS = isoMDS(D, k=4) # 非度量形式的多维标度分析
MDS
MDS$stress # 查看应力值
MDS = isoMDS(D, k=5) # 非度量形式的多维标度分析
# MDS
MDS$stress # 查看应力值
MDS = isoMDS(D, k=7) # 非度量形式的多维标度分析
# MDS
MDS$stress # 查看应力值
MDS = isoMDS(D, k=8) # 非度量形式的多维标度分析
# MDS
MDS$stress # 查看应力值
for (i in 3:9){
MDS = isoMDS(D, k=2) # 非度量形式的多维标度分析
# MDS
MDS$stress # 查看应力值
}
# MDS
MDS$stress # 查看应力值
for (i in 3:9){
MDS = isoMDS(D, k=2) # 非度量形式的多维标度分析
# MDS
print(MDS$stress) # 查看应力值
}
for (i in 3:9){
MDS = isoMDS(D, k=i) # 非度量形式的多维标度分析
# MDS
print(MDS$stress) # 查看应力值
}
